{"name": "test_register[case4]", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'password': ...t be blank.']} == {'detail': 'N... credentials'}\n  Left contains 1 more item:\n  {'password': ['This field may not be blank.']}\n  Right contains 1 more item:\n  {'detail': 'No active account found with the given credentials'}\n  Full diff:\n  - {'detail': 'No active account found with the given credentials'}\n  + {'password': ['This field may not be blank.']}", "trace": "self = <pytest_api.testCases.test_registration.TestRegister object at 0x00000210E968BB20>\ncase = {'check_db_sql': None, 'expected': '{\"detail\":\"No active account found with the given credentials\"}', 'id': 5, 'method': 'post', ...}\ndatabase = <pytest_api.utils.db_mysql_handler.HandleDB object at 0x00000210E970C2B0>\n\n    @pytest.mark.parametrize(\"case\", cases)\n    def test_register(self, case, database):\n        logger.info(\"*********   Case_{}：{}   *********\".format(case[\"id\"], case[\"title\"]))\n        expected = eval(case[\"expected\"])\n    \n        # test steps, test data\n        # replace some dynamic values before send request.\n        # replace '#phone#' with 'get_new_phone_number'\n        if case[\"request_data\"].find(\"#phone#\") != -1:\n            pn = get_new_phone_number()\n            case = replace_mark_with_value(case, \"#phone#\", pn)\n    \n        # send request\n        response = send_requests(case[\"method\"], case[\"url\"], case[\"request_data\"])\n        # Assert - code == 0 msg == ok\n        logger.info(\"Expected result：{}\".format(case[\"expected\"]))\n    \n        try:\n            # self.assertEqual(response.json()[\"code\"], expected[\"code\"])\n            # self.assertEqual(response.json()[\"msg\"], expected[\"msg\"])\n>           assert response.json() == expected\nE           AssertionError: assert {'password': ...t be blank.']} == {'detail': 'N... credentials'}\nE             Left contains 1 more item:\nE             {'password': ['This field may not be blank.']}\nE             Right contains 1 more item:\nE             {'detail': 'No active account found with the given credentials'}\nE             Full diff:\nE             - {'detail': 'No active account found with the given credentials'}\nE             + {'password': ['This field may not be blank.']}\n\ntestCases\\test_registration.py:41: AssertionError"}, "parameters": [{"name": "case", "value": "{'id': 5, 'title': 'register failed mobile phone number missing', 'method': 'post', 'url': '/paymall_admin/authorizations/', 'request_data': '{\"username\": \"aaaaaa\", \"password\": \"\"}', 'expected': '{\"detail\":\"No active account found with the given credentials\"}', 'check_db_sql': None}"}], "start": 1664942543400, "stop": 1664942543520, "uuid": "1905a3c1-1bec-4e14-8ff9-a893e80475a7", "historyId": "6bd84273519e485331f678f513963ce0", "testCaseId": "bdda1c3547396fd1e333e79f45d10242", "fullName": "testCases.test_registration.TestRegister#test_register", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('class_init_envdata')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_registration"}, {"name": "subSuite", "value": "TestRegister"}, {"name": "host", "value": "DESKTOP-E380NSU"}, {"name": "thread", "value": "20768-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_registration"}]}